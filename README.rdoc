Installing Redmine
Installing Redmine
Requirements
Operating system
Ruby & Ruby on Rails & Rack
Compatibility notes
Database
Optional components
Redmine Version
Installation procedure
Configuration
Email / SMTP server settings
SCM settings
Attachment storage settings
Logging configuration
Backups
Notes on Windows installation
Alternative to manual installation
This is the installation documentation for Redmine 1.4.0 and higher. You can still read the document for 1.3.x here.

Requirements
Operating system
Redmine should run on most Unix, Linux, Mac, Mac Server and Windows systems as long as Ruby is available on this platform. See specific installation HowTos here.

Ruby & Ruby on Rails & Rack
The required Ruby and Ruby on Rails versions for a given Redmine version is:

Redmine version	Supported Ruby versions	Required Rails version	Supported RubyGems versions
current trunk	ruby 1.8.7, 1.9.2, 1.9.3, jruby-1.6.7	Rails 3.2.5	RubyGems <= 1.8
2.0.2	ruby 1.8.7, 1.9.2, 1.9.3, jruby-1.6.7	Rails 3.2.5	RubyGems <= 1.8
2.0.0, 2.0.1	ruby 1.8.7, 1.9.2, 1.9.3, jruby-1.6.7	Rails 3.2.3	RubyGems <= 1.8
1.4.x	ruby 1.8.7, 1.9.2, 1.9.3, jruby-1.6.7	Rails 2.3.14	RubyGems <= 1.8
Compatibility notes
Mongrel 1.1.5 needs a patch attached to #7688 to work fine with Rails 2.3.11. In case of upgrade, another issue may appear for some time after migration (#7857).
Database
MySQL 5.0 or higher (recommended)
make sure to install the C bindings for Ruby that dramatically improve performance. You can get them by running gem install mysql2. If you have problem installing the mysql gem refer Rails Wiki pages
PostgreSQL 8 or higher (8.2 or higher starting from Redmine 2.0.0)
make sure your database datestyle is set to ISO (Postgresql default setting). You can set it using: ALTER DATABASE "redmine_db" SET datestyle="ISO,MDY";
some bugs in PostgreSQL 8.4.0 and 8.4.1 affect Redmine behavior (#4259, #4314), they are fixed in PostgreSQL 8.4.2
SQLite 3
Optional components
SCM binaries (eg. svn), for repository browsing (must be available in your PATH). See RedmineRepositories for SCM compatibility and requirements.
RMagick (to enable Gantt export to png image)
Ruby OpenID Library (to enable OpenID support) [only on Redmine trunk / 0.9-dev] Version 2 or greater is required.
Redmine Version
It is recommended that the majority of users install the proper point releases of redmine. Redmine currently releases a new version every 6 months, and these releases are considered very usable and stable. It is not recommended to install redmine from trunk, unless you are deeply familiar with Ruby on Rails and keep up with the changes - Trunk does break from time-to-time.

Installation procedure
1. Get the Redmine source code by either downloading a packaged release or checking out the code repository. See Download.

2. Since 1.4.0, Redmine uses Bundler to manage gems dependencies. You need to install Bundler first:

gem install bundler
Then you can install all the gems required by Redmine using the following command:

bundle install --without development test
If ImageMagick is not installed on your system, you should skip the installation of the rmagick gem using: `bundle install --without development test rmagick`.

Sidenote concerning the installation of rmagick on Windows:

At the time of writing, there is little chance that the rmagick gem installation (if not yet installed), go through fine when running the bundle install command; you'll find some help here .

You can also skip the installation of the database adapters you're not using. For example, if you're using MySQL, you can skip the installation of the postgresql and sqlite gems using `bundle install --without development test postgresql sqlite`.

If you need to load any gems that are not required by Redmine core (eg. mongrel, fcgi), create a file named Gemfile.local at the root of your redmine directory. It will be loaded automatically when running `bundle install`. Example:

# Gemfile.local
gem "mongrel" 
3. Create an empty database and accompanying user named redmine for example.

For MySQL:

create database redmine character set utf8;
create user 'redmine'@'localhost' identified by 'my_password';
grant all privileges on redmine.* to 'redmine'@'localhost';
For versions of MySQL prior to 5.0.2 - skip the 'create user' step and instead:

grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'my_password';
For PostgreSQL:

CREATE ROLE redmine LOGIN ENCRYPTED PASSWORD 'my_password' NOINHERIT VALID UNTIL 'infinity';
CREATE DATABASE redmine WITH ENCODING='UTF8' OWNER=redmine;
4. Copy config/database.yml.example to config/database.yml and edit this file in order to configure your database settings for "production" environment.

Example for a MySQL database using ruby1.8 or jruby:

production:
  adapter: mysql
  database: redmine
  host: localhost
  username: redmine
  password: my_password
Example for a MySQL database using ruby1.9 (adapter must be set to mysql2):

production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: redmine
  password: my_password
If your server is not running on the standard port (3306), use this configuration instead:

production:
  adapter: mysql
  database: redmine
  host: localhost
  port: 3307
  username: redmine
  password: my_password
Example for a PostgreSQL database (default port):

production:
  adapter: postgresql
  database: <your_database_name>
  host: <postgres_host>
  username: <postgres_user>
  password: <postgres_user_password>
  encoding: utf8
  schema_search_path: <database_schema> (default - public)
5. Generate a session store secret.

with Redmine 1.4.x:
rake generate_session_store
with Redmine 2.x:
rake generate_secret_token
6. Create the database structure, by running the following command under the application root directory:

RAILS_ENV=production rake db:migrate
It will create tables and an administrator account.

If you get this error: 

Rake aborted!
no such file to load -- net/https
you need to install libopenssl-ruby1.8, in Ubuntu, just like this: apt-get install libopenssl-ruby1.8

7. Insert default configuration data in database, by running the following command:

RAILS_ENV=production rake redmine:load_default_data
This step is optional but highly recommended, as you can define your own configuration from scratch. It will load default roles, trackers, statuses, workflows and enumerations.

8. Setting up permissions

NB: Windows users have to skip this section.

The user who runs Redmine must have write permission on the following subdirectories: files, log, tmp (create the last one if not present).

Assuming you run Redmine with a redmine user:

mkdir tmp public/plugin_assets
sudo chown -R redmine:redmine files log tmp public/plugin_assets
sudo chmod -R 755 files log tmp public/plugin_assets
9. Test the installation by running WEBrick web server:

with Redmine 1.4.x:
ruby script/server webrick -e production
with Redmine 2.x:
ruby script/rails server webrick -e production
Once WEBrick has started, point your browser to http://localhost:3000/. You should now see the application welcome page.

Note: Webrick is not suitable for normal use, please only use webrick for testing that the installation up to this point is functional. It is not recommended to use webrick for anything other than development. Use one of the many other guides in this wiki to setup redmine to use either passenger (aka mod_rails) or mongrel to serve up your redmine.

10. Use default administrator account to log in:

login: admin
password: admin
You can go to Admin & Settings to modify application settings.

Configuration
Since of 1.2.0, Redmine settings are defined in a file named config/configuration.yml.

If you need to override default application settings, simply copy config/configuration.yml.example to config/configuration.yml then edit the new file; the file is well commented by itself, so you should have a look at it.

This settings may be defined per Rails environment (production/development/test).

Important : don't forget to restart the application after any change.

Email / SMTP server settings
Email configuration is described in a dedicated page.

SCM settings This configuration section allows you to:
override default commands names if the SCM binaries present in the PATH variable doesn't use the standard name (Windows .bat/.cmd names won't work)
specify the full path to the binary
Examples (with Subversion):

Command name override:

scm_subversion_command: "svn_replacement.exe"
Absolute path:

scm_subversion_command: "C:\Program Files\Subversion\bin\svn.exe"
Attachment storage settings
You can set a path where Redmine attachments will be stored which is different from the default 'files' directory of your Redmine instance using the attachments_storage_path setting.

Examples:

attachments_storage_path: /var/redmine/files
attachments_storage_path: D:/redmine/files
Logging configuration
Redmine defaults to a log level of :info, writing to the log subdirectory. Depending on site usage, this can be a lot of data so to avoid the contents of the logfile growing without bound, consider rotating them, either through a system utility like logrotate or via the config/additional_environment.rb file.

To use the latter, copy config/additional_environment.rb.example to config/additional_environment.rb and add the following lines. Note that the new logger defaults to a high log level and hence has to be explicitly set to info.

1#Logger.new(PATH,NUM_FILES_TO_ROTATE,FILE_SIZE)
2config.logger = Logger.new(config.log_path, 2, 1000000)
3config.logger.level = Logger::INFO
Backups Redmine backups should include:
data (stored in your redmine database)
attachments (stored in the files directory of your Redmine install)
Here is a simple shell script that can be used for daily backups (assuming you're using a mysql database):

# Database
/usr/bin/mysqldump -u <username> -p<password> <redmine_database> | gzip > /path/to/backup/db/redmine_`date +%y_%m_%d`.gz

# Attachments
rsync -a /path/to/redmine/files /path/to/backup/files
Notes on Windows installation
Get and install rubyinstaller from http://rubyforge.org. Form start menu select Start Command Prompt with Ruby

In the prompt follow the instruction given before

The commands:

RAILS_ENV=production rake db:migrate
RAILS_ENV=production rake redmine:load_default_data
has to be changed in

set RAILS_ENV=production
rake db:migrate
rake redmine:load_default_data
You may need to install install the mysql gem, with the command

gem install mysql
And in some case is required to copy the libmysql.dll file in your ruby/bin directory.
Not all libmysql.dll are ok this seem to works http://instantrails.rubyforge.org/svn/trunk/InstantRails-win/InstantRails/mysql/bin/libmySQL.dll

Alternative to manual installation
Some users may prefer to skip manual installation by using one of the third-party Redmine bundles on the download page.
